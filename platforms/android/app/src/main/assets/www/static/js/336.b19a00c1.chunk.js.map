{"version":3,"sources":["redux/account/accountType/actions.js","containers/Modules/Account/AccountType/index.js"],"names":["actions","getAccountTypes","type","clearSuccess","clearError","clearErrorField","AccountTypes","this","props","accountTypes","error","notification","success","columns","title","dataIndex","key","align","width","getLanguage","id","rowKey","render","text","className","display","sessionStorage","getItem","loading","removeItem","data","map","accountType","index","push","style","margin","onClick","history","replace","marginLeft","length","dataSource","bordered","pagination","description","Component","connect","state"],"mappings":"qQAeeA,EAfC,CACZC,gBAAiB,iBAAO,CACpBC,KAAO,8BAEXC,aAAc,iBAAO,CACjBD,KAAM,kBAEVE,WAAY,iBAAO,CACfF,KAAM,gBAEVG,gBAAiB,iBAAO,CACpBH,KAAM,uB,SCgBRI,E,4LAEFC,KAAKC,MAAMP,oB,2CAKPM,KAAKC,MAAMC,aAAaC,QAC1BC,YAAa,QAASJ,KAAKC,MAAMC,aAAaC,OAC9CH,KAAKC,MAAMJ,cAGTG,KAAKC,MAAMC,aAAaG,UAC1BD,YAAa,UAAWJ,KAAKC,MAAMC,aAAaG,SAChDL,KAAKC,MAAML,kB,+BAIL,IAAD,OACDU,EAAU,CACd,CACEC,MAAO,MACPC,UAAW,MACXC,IAAK,MACLC,MAAO,SACPC,MAAO,MAET,CACEJ,MAAOK,YAAY,CAAEC,GAAI,SACzBL,UAAW,oBACXC,IAAK,QAEP,CACEF,MAAOK,YAAY,CAAEC,GAAI,sBACzBL,UAAW,cACXC,IAAK,eAEP,CACEF,MAAOK,YAAY,CAAEC,GAAI,kBACzBL,UAAW,iBACXM,OAAQ,iBACRJ,MAAO,SACPK,OAAQ,SAAAC,GACN,IAAIC,EACAC,EAQJ,OAPa,IAATF,GACFC,EAAY,SACZC,EAAUN,YAAY,CAAEC,GAAI,WACV,IAATG,IACTC,EAAY,UACZC,EAAUN,YAAY,CAAEC,GAAI,YAEvB,kBAAC,IAAD,CAAWI,UAAWA,GAAYC,MAM7CC,eAAeC,QAAQ,wBACtBpB,KAAKC,MAAMC,aAAamB,UAEzBjB,YAAa,QAASe,eAAeC,QAAQ,uBAC7CD,eAAeG,WAAW,uBAK1BH,eAAeC,QAAQ,0BACtBpB,KAAKC,MAAMC,aAAamB,UAEzBjB,YAAa,UAAWe,eAAeC,QAAQ,yBAC/CD,eAAeG,WAAW,yBArDrB,IAwDCpB,EAAiBF,KAAKC,MAAMC,aAA5BA,aAEJqB,EAAO,GAQX,OAPArB,EAAasB,KAAI,SAACC,EAAaC,GAC7B,OAAOH,EAAKI,KAAL,eACFF,EADE,CAELhB,IAAKiB,EAAQ,QAKf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEnB,MAAO,kBAAC,IAAD,CAAcM,GAAG,4BACxBe,MAAO,CAAEC,OAAQ,IAEjB,kBAAC,IAAD,CACEC,QAAS,kBAAM,EAAK7B,MAAM8B,QAAQC,QA9F7B,2BA+FLJ,MAAO,CAAEK,WAAY,QAErB,kBAAC,IAAD,CAAcpB,GAAG,kBAGrB,kBAAC,IAAD,KAC2B,IAAxBX,EAAagC,QAAiBlC,KAAKC,MAAMC,aAAamB,QAKrD,yBAAKJ,UAAU,mBACb,kBAAC,IAAD,CAAYW,MAAO,CAAEjB,MAAO,SAC1B,kBAAC,IAAD,CACEwB,WAAYZ,EACZjB,QAASA,EACTe,QAASrB,KAAKC,MAAMC,aAAamB,QACjCJ,UAAU,mBACVmB,UAAU,EAGVC,YAAY,MAdlB,kBAAC,IAAD,CACEC,YAAa,kBAAC,IAAD,CAAczB,GAAG,uC,GArGnB0B,aAoIZC,uBANS,SAAAC,GACtB,MAAO,CACLvC,aAAcuC,EAAMhB,eAIgBhC,EAAzB+C,CAAkCzC","file":"static/js/336.b19a00c1.chunk.js","sourcesContent":["const actions = {\r\n    getAccountTypes: () => ({\r\n        type : 'GET_ACCOUNT_TYPES_REQUEST',\r\n    }),\r\n    clearSuccess: () => ({\r\n        type: \"CLEAR_SUCCESS\"\r\n    }),\r\n    clearError: () => ({\r\n        type: \"CLEAR_ERROR\"\r\n    }),\r\n    clearErrorField: () => ({\r\n        type: \"CLEAR_ERROR_FIELD\"\r\n    })\r\n}\r\n\r\nexport default actions;","import React, { Component } from \"react\";\r\n//import { Table, Divider, Tag } from \"antd\";\r\nimport Button from \"../../../../components/uielements/button\";\r\nimport LayoutWrapper from \"../../../../components/utility/layoutWrapper\";\r\nimport PageHeader from \"../../../../components/utility/pageHeader\";\r\nimport IntlMessages from \"../../../../components/utility/intlMessages\"; //\r\n//import CardWrapper, { Box, StatusTag } from \"../../../App/app.style\";\r\nimport { connect } from \"react-redux\";\r\n// import { Link } from \"react-router-dom\";\r\n// import Button from \"../../../../components/uielements/button\";\r\nimport TableWrapper from \"../../../Tables/antTables/antTable.style\";\r\nimport Scrollbars from \"../../../../components/utility/customScrollBar\";\r\nimport notification from \"../../../../components/notification\";\r\nimport { Empty } from \"antd\";\r\nimport CardWrapper, {\r\n  Box,\r\n  StatusTag\r\n  // Fieldset,\r\n  // Label\r\n} from \"../../../App/app.style\";\r\nimport actions from \"../../../../redux/account/accountType/actions\";\r\n//import Form from \"../../../../components/uielements/form\";\r\nimport getLanguage from \"../../../App/MyLanguange\";\r\n\r\n//const { getAccountTypes } = actions;\r\nconst redirectTo = \"/dashboard/setup/menus\";\r\n\r\nclass AccountTypes extends Component {\r\n  componentDidMount() {\r\n    this.props.getAccountTypes();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // Display error notif\r\n    if (this.props.accountTypes.error) {\r\n      notification(\"error\", this.props.accountTypes.error);\r\n      this.props.clearError();\r\n    }\r\n\r\n    if (this.props.accountTypes.success) {\r\n      notification(\"success\", this.props.accountTypes.success);\r\n      this.props.clearSuccess();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const columns = [\r\n      {\r\n        title: \"No.\",\r\n        dataIndex: \"key\",\r\n        key: \"key\",\r\n        align: \"center\",\r\n        width: \"5%\"\r\n      },\r\n      {\r\n        title: getLanguage({ id: \"name\" }),\r\n        dataIndex: \"account_type_name\",\r\n        key: \"name\"\r\n      },\r\n      {\r\n        title: getLanguage({ id: \"generalLedgerType\" }),\r\n        dataIndex: \"description\",\r\n        key: \"description\"\r\n      },\r\n      {\r\n        title: getLanguage({ id: \"normalBalance\" }),\r\n        dataIndex: \"normal_balance\",\r\n        rowKey: \"normal_balance\",\r\n        align: \"center\",\r\n        render: text => {\r\n          let className;\r\n          let display;\r\n          if (text === 1) {\r\n            className = \"active\";\r\n            display = getLanguage({ id: \"debit\" });\r\n          } else if (text === 2) {\r\n            className = \"primary\";\r\n            display = getLanguage({ id: \"credit\" });\r\n          }\r\n          return <StatusTag className={className}>{display}</StatusTag>;\r\n        }\r\n      }\r\n    ];\r\n    // Display error notif\r\n    if (\r\n      sessionStorage.getItem(\"error_account_type\") &&\r\n      !this.props.accountTypes.loading\r\n    ) {\r\n      notification(\"error\", sessionStorage.getItem(\"error_account_type\"));\r\n      sessionStorage.removeItem(\"error_account_type\");\r\n    }\r\n\r\n    // Display success notif\r\n    if (\r\n      sessionStorage.getItem(\"success_account_type\") &&\r\n      !this.props.accountTypes.loading\r\n    ) {\r\n      notification(\"success\", sessionStorage.getItem(\"success_account_type\"));\r\n      sessionStorage.removeItem(\"success_account_type\");\r\n    }\r\n\r\n    const { accountTypes } = this.props.accountTypes;\r\n    // console.log(accountTypes);\r\n    let data = [];\r\n    accountTypes.map((accountType, index) => {\r\n      return data.push({\r\n        ...accountType,\r\n        key: index + 1\r\n      });\r\n    });\r\n\r\n    return (\r\n      <LayoutWrapper>\r\n        <Box>\r\n          <PageHeader\r\n            title={<IntlMessages id=\"accountTypes.pageHeader\" />}\r\n            style={{ margin: 0 }}\r\n          >\r\n            <Button\r\n              onClick={() => this.props.history.replace(redirectTo)}\r\n              style={{ marginLeft: \"5px\" }}\r\n            >\r\n              <IntlMessages id=\"button.back\" />\r\n            </Button>\r\n          </PageHeader>\r\n          <CardWrapper>\r\n            {accountTypes.length === 0 && !this.props.accountTypes.loading ? (\r\n              <Empty\r\n                description={<IntlMessages id=\"accountTypes.table.noData\" />}\r\n              />\r\n            ) : (\r\n              <div className=\"isoInvoiceTable\">\r\n                <Scrollbars style={{ width: \"100%\" }}>\r\n                  <TableWrapper\r\n                    dataSource={data}\r\n                    columns={columns}\r\n                    loading={this.props.accountTypes.loading}\r\n                    className=\"invoiceListTable\"\r\n                    bordered={true}\r\n                    // Set pagination, jika ada page_size mengunakan pagination API\r\n                    // jika tidak ada page_size menggunakan pagination bawaan\r\n                    pagination={false}\r\n                  />\r\n                </Scrollbars>\r\n              </div>\r\n            )}\r\n          </CardWrapper>\r\n        </Box>\r\n      </LayoutWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    accountTypes: state.accountType\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, actions)(AccountTypes);\r\n"],"sourceRoot":""}